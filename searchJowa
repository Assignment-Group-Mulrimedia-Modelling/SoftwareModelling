import java.awt.BorderLayout;
import java.sql.*;
import javax.swing.*;
import java.awt.EventQueue;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

//import net.proteanit.sql.DbUtils;

import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.Color;
import java.awt.Font;
import javax.swing.border.LineBorder;
import java.awt.SystemColor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class search extends JFrame {

	private JPanel contentPane;
	private JTable table;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					search frame = new search();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	Connection conn = null;
	private JTextField textFieldSearch;
	private JTable table_1;
	private JTable table_2;
	private JLabel lblSearch;
	private JScrollPane scrollPane_1;
	private JButton btnAdd;
	private JTextField textFieldQty;
	private JButton btnProduct;
	/**
	 * Create the frame.
	 */
	public search() {
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowOpened(WindowEvent e) {
				showData();
				
				
			}
		});
		conn = connection.dbConnector();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(380, 125, 900, 488);
		contentPane = new JPanel();
		contentPane.setBackground(new Color(255, 255, 255));
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setToolTipText("");
		scrollPane.setBackground(new Color(255, 255, 255));
		scrollPane.setForeground(new Color(255, 255, 255));
		scrollPane.setBounds(39, 25, 695, 191);
		scrollPane.getViewport().setBackground(new Color(255,255,255));
		
		contentPane.add(scrollPane);
		
		
		table = new JTable();
		table.setBackground(new Color(245, 222, 179));
		table.setSurrendersFocusOnKeystroke(true);
		table.setShowVerticalLines(false);
		table.setShowHorizontalLines(false);
		scrollPane.setViewportView(table); 
		
		ArrayList<Item> product = new ArrayList<>();  
		
		textFieldSearch = new JTextField();
		textFieldSearch.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent arg0) {
				showData();
				
				
			}
		});
		textFieldSearch.setBounds(115, 236, 130, 22);
		contentPane.add(textFieldSearch);
		textFieldSearch.setColumns(10);
		
		table_1 = new JTable();
		table_1.setBounds(148, 322, 1, 1);
		contentPane.add(table_1);
		
		scrollPane_1 = new JScrollPane();
		scrollPane_1.setForeground(new Color(255, 255, 255));
		scrollPane_1.setBounds(39, 279, 695, 126);
		scrollPane_1.getViewport().setBackground(new Color(255,255,255));
		contentPane.add(scrollPane_1);
		
		table_2 = new JTable();
		scrollPane_1.setViewportView(table_2);
		table_2.setBackground(new Color(255, 255, 255));
		table_2.setShowGrid(false);
		table_2.setShowHorizontalLines(false);
		table_2.setShowVerticalLines(false);
		
		lblSearch = new JLabel("Name :");
		lblSearch.setFont(new Font("Tahoma", Font.BOLD, 15));
		lblSearch.setBounds(49, 218, 54, 56);
		contentPane.add(lblSearch);
		
		textFieldQty = new JTextField();
		textFieldQty.setBounds(396, 236, 116, 22);
		contentPane.add(textFieldQty);
		textFieldQty.setColumns(10);
		
		JLabel lblQty = new JLabel("Qty :");
		lblQty.setFont(new Font("Tahoma", Font.BOLD, 15));
		lblQty.setBounds(346, 237, 38, 16);
		contentPane.add(lblQty);
		
		
		btnAdd = new JButton("add");
		btnAdd.setBounds(622, 234, 97, 25);
		contentPane.add(btnAdd);
		
		btnProduct = new JButton("New Product");
		btnProduct.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			}
		});
		btnProduct.setBounds(760, 92, 110, 37);
		contentPane.add(btnProduct);
		btnAdd.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				int Quantity; //To store the value in the textbox
				double UPrice;
				try {
					Quantity = Integer.parseInt(textFieldQty.getText());
					String query = "SELECT * from product where Name = ? ";
					PreparedStatement pst = conn.prepareStatement(query);
					pst.setString(1, textFieldSearch.getText() );
					
					ResultSet rs = pst.executeQuery();
					while(rs.next()) {
						Item item = new Item();
						
						item.setQty(Quantity);
						item.setName(rs.getString("Name"));
						item.setRPrice(rs.getDouble("RPrice"));
						item.setBoxQty(rs.getInt("BoxQty"));
						
						product.add(item);
				
						
					}
					
					//table.setModel(DbUtils.resultSetToTableModel(rs));
					
					pst.close();
				} catch (SQLException ex) {
					// TODO Auto-generated catch block
					ex.printStackTrace();
				}
				showData();
				textFieldSearch.setText("");
				textFieldQty.setText("");
				ArrayList <Object[]> inv = new ArrayList<Object[]>();
				for (int i =0;i<product.size();i++) {
					inv.add(new Object[] {
							product.get(i).getQuantity(),
							product.get(i).getName(),
							product.get(i).getUPrice(),
							product.get(i).getPrice()
							
							
							
					});
				}
				table_2.setModel(new DefaultTableModel(inv.toArray(new Object[][] {}),
						new String[] {"Qty", "Name", "UPrice", "Item Total"}));
				
			}
			
			
		});
		
	}
	private void showData() {
		Connection conn = connection.dbConnector();
		DefaultTableModel model = new DefaultTableModel();
		model.addColumn("ID");
		model.addColumn("Name");
		model.addColumn("Supplier");
		model.addColumn("Qty");
		model.addColumn("Bonus");
		model.addColumn("BoxQty");
		model.addColumn("W.Price");
		model.addColumn("R.Price");
		model.addColumn("Expiry");
		model.addColumn("Stock");
		
		try {
			
			String query = "SELECT * FROM product";
			Statement st = conn.createStatement();
			ResultSet rs = st.executeQuery(query);
			while (rs.next()) {
				
				model.addRow(new Object[] {
						rs.getString("ItemNO"),
						rs.getString("Name"),
						rs.getString("Supplier"),
						rs.getString("QtyBought"),
						rs.getString("Bonus"),
						rs.getString("BoxQty"),
						rs.getString("WPrice"),
						rs.getString("RPrice"),
						rs.getString("Exp"),
						rs.getString("Stock"),
						
						
				});
			}
			rs.close();
			st.close();
			conn.close();
			
			table.setModel(model);
			table.setAutoResizeMode(0);
			table.getColumnModel().getColumn(0).setPreferredWidth(50);
			table.getColumnModel().getColumn(1).setPreferredWidth(120);
			table.getColumnModel().getColumn(2).setPreferredWidth(120);
			table.getColumnModel().getColumn(3).setPreferredWidth(50);
			table.getColumnModel().getColumn(4).setPreferredWidth(50);
			table.getColumnModel().getColumn(5).setPreferredWidth(62);
			table.getColumnModel().getColumn(6).setPreferredWidth(60);
			table.getColumnModel().getColumn(7).setPreferredWidth(60);
			table.getColumnModel().getColumn(8).setPreferredWidth(60);
			table.getColumnModel().getColumn(9).setPreferredWidth(60);
			
			
			
			
		} catch(Exception e1) {
			System.out.println("Error: " + e1);
		}
	}
	
}
